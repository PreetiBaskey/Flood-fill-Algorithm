#include<bits/stdc++.h>
using namespace std;

void BFS(vector<vector<int>> &image, vector<vector<int>> &visited, int sr, int sc, int newColor, int oldColor) {
    int m = image.size();
    int n = image[0].size();
    image[sr][sc] = newColor;
    visited[sr][sc] = 1;
    queue<pair<int, int>> q;
    q.push({sr, sc});
    int delRows[] = {-1, 0, 1, 0};
    int delColumns[] = {0, 1, 0, -1};
    while(!q.empty()) {
        int front_row = q.front().first;
        int front_col = q.front().second;
        q.pop();
        for(int i = 0; i < 4; i++) {
            int newRow = front_row + delRows[i];
            int newCol = front_col + delColumns[i];
            if(newRow >= 0 && newRow < m && newCol >= 0 && newCol < n && image[newRow][newCol] == oldColor && !visited[newRow][newCol]) {
                image[newRow][newCol] = newColor;
                visited[newRow][newCol] = 1;
                q.push({newRow, newCol});
            }
        }
    }
}

int main() {
    
    int m = 3, n = 3;
    int sr = 1, sc = 1, newColor = 2;
    vector<vector<int>> image(m, vector<int>(n));
    
    for(int i = 0; i < m; i++) {
        cout<<"Enter "<<i + 1<<" row :- ";
        for(int j = 0; j < n; j++) {
            cin>>image[i][j];
        }
        cout<<endl;
    }
    cout<<"2 D Array is :- "<<endl;
    for(int i = 0; i < m; i++) {
        for(int j = 0; j < n; j++) {
            cout<<image[i][j]<<" ";
        }
        cout<<endl;
    }
    
    vector<vector<int>> visited(m, vector<int>(n, 0));
    int oldColor = image[sr][sc];
    
    BFS(image, visited, sr, sc, newColor, oldColor);
    
    cout<<"Flood fill image is :- "<<endl;
    for(int i = 0; i < m; i++) {
        for(int j = 0; j < n; j++) {
            cout<<image[i][j]<<" ";
        }
        cout<<endl;
    }
    
    
    
    return 0;
}